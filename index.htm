<!DOCTYPE>
<html>
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cousine:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <script src="SWOps.js"></script>
    <script src="model_reordered.js"></script>
    <script>
        function TensorFromImage(img)
        {
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');
            const padded_width = img.width + (img.width % 2);
            const padded_height = img.height + (img.height % 2);
            canvas.width = padded_width;
            canvas.height = padded_height;
            context.drawImage(img, 0, 0 );
            var imageData = context.getImageData(0, 0, padded_width, padded_height);
            var tensorData = new Float32Array(padded_width * padded_height * 3);
            var tensorIndex = 0;
            var tensorPlane1Offset = padded_width * padded_height;
            var tensorPlane2Offset = 2 * tensorPlane1Offset;
            for (y = 0; y < padded_height; y++)
            {
                var row = y * padded_width * 4;
                for (x = 0; x < padded_width; x++)
                {
                    pixel = row + x * 4;
                    tensorData[tensorIndex] = imageData.data[pixel] / 255.0;
                    tensorData[tensorIndex + tensorPlane1Offset] = imageData.data[pixel+1] / 255.0;
                    tensorData[tensorIndex + tensorPlane2Offset] = imageData.data[pixel+2] / 255.0;
                    tensorIndex++;
                }
            }
            tensorData.width = padded_width;
            tensorData.height = padded_height;
            return tensorData;
        }
        function ImageFromTensor(tensorData, width, height)
        {
            var imageData = new Uint8ClampedArray(width * height * 4);
            var tensorIndex = 0;
            var tensorPlane1Offset = width * height;
            var tensorPlane2Offset = 2 * tensorPlane1Offset;
            for (y = 0; y < height; y++)
            {
                var row = y * width * 4;
                for (x = 0; x < width; x++)
                {
                    pixel = row + x * 4;
                    imageData[pixel] = tensorData[tensorIndex] * 255.0;
                    imageData[pixel+1]  = tensorData[tensorIndex + tensorPlane1Offset] * 255.0;
                    imageData[pixel+2] = tensorData[tensorIndex + tensorPlane2Offset] * 255.0;
                    imageData[pixel+3] = 255;
                    tensorIndex++;
                }
            }
            return new ImageData(imageData, width, height);
        }

        function mulReduce(arr) {
            return arr.reduce((product, value) => product * value, 1);
        }
        async function main() {
            const weights_file = 'weights.bin';
            let cache = await caches.open("weights")
            let weights_response = await cache.match(weights_file);
            if (!weights_response)
            {
                await cache.add(weights_file);
                weights_response = await cache.match(weights_file);
            }
            const weights_buffer = await weights_response.arrayBuffer();

            var startTime = performance.now();
            clearCanvas();
            image = document.querySelector("img");
            const tensor = TensorFromImage(image);

            // Build WebNN Graph and execute it
            let result = null;
            try {
                const context = await navigator.ml.createContext(
                    {'deviceType' : 'gpu'});
                const builder = new MLGraphBuilder(context);
                InstallCpuOps(builder);

                const operandType = {type: 'float32',
                    dataType: 'float32', shape: [1, 3, tensor.height, tensor.width]};
                const input_operand = builder.input('input', operandType);
                const output_operand = loadModelGraph(input_operand, weights_buffer, builder);
                const graph = await builder.build({'output': output_operand});
                const outputBuffer = new Float32Array(mulReduce(output_operand.shape()));
                const inputs = {'input': tensor};
                const outputs = {'output': outputBuffer};
                result = await context.compute(graph, inputs, outputs);
            } catch (webnn_exception) {
                document.querySelector("b").innerText = "Error: " + webnn_exception;
                return;
            }

            // Convert tensor back to image
            const imageData = ImageFromTensor(result.outputs.output, tensor.width * 2, tensor.height * 2);
            var canvasHTML = document.querySelector("canvas");
            let canvas_context = canvasHTML.getContext('2d');
            canvasHTML.width = image.width*2;
            canvasHTML.height = image.height*2;
            canvas_context.putImageData(imageData, 0, 0);
            var endTime = performance.now();
            document.querySelector("b").innerText = Math.round(endTime - startTime) + "ms " + tensor.width + " x " + tensor.height + " | " + Math.round((tensor.width*tensor.height)/Math.round(endTime - startTime)) + "K pixels/second";
        }
        function clearCanvas() {
            var canvasHTML = document.querySelector("canvas");
            let context = canvasHTML.getContext('2d');
            context.clearRect(0, 0, canvasHTML.width, canvasHTML.height);
        }
        function dropHandler(ev)
        {
            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            if (ev.dataTransfer.items) {
                // Use DataTransferItemList interface to access the file(s)
                [...ev.dataTransfer.items].forEach((item, i) => {
                    // If dropped items aren't files, reject them
                    if (item.kind === "file") {
                        const file = item.getAsFile();
                        console.log(`A file[${i}].name = ${file.name}`);
                        var reader=new FileReader();
                        reader.onload= function (event) {
                            var image = document.querySelector("img");
                            image.src = reader.result;
                        }
                        reader.readAsDataURL(file);
                    }
                });
            } else {
                // Use DataTransfer interface to access the file(s)
                [...ev.dataTransfer.files].forEach((file, i) => {
                    console.log(`B file[${i}].name = ${file.name}`);
                });
            }
        }
        function dragOverHandler(ev) {
            ev.preventDefault();
        }
    </script>
</head>
<body>
    <div>
        <h1>Rapid ESRGAN</h1>
        <div>
            <div>
                An ESRGAN implementation using WebNN, experience Super Resolution in your browser.<br>
                <span class="light">
                To enable experimental WebNN visit 
                <u>chrome://flags/#web-machine-learning-neural-network</u>
                <br><span>Metrics: Inference Time <b>&#8734;</b></span><br>
                </span>
            </div>
            <button onclick="main()">SuperRes</button> <button onclick="clearCanvas()">Clear</button><br>
            <center>&#128071 Drop your images here &#128071;</center>
            <img src="0567x2.png" ondrop="dropHandler(event)" ondragover="dragOverHandler(event);" onload="main()"></img><br><canvas style="zoom:0.5"></canvas>
        </div>
    </div>
</body>
</html>
